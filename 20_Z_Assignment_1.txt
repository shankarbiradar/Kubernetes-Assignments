Learning Objectives:-
Create the `auth-svc` service
Create the `data-svc` service


Problem Statement:-
Your company has just deployed two components of a web application to a Kubernetes cluster, using deployments with multiple replicas. They need a way to provide dynamic network access to these replicas so that there will be uninterrupted access to the components whenever replicas are created, removed, and replaced. One deployment is called auth-deployment, an authentication provider that needs to be accessible from outside the cluster. The other is called data-deployment, and it is a component designed to be accessed only by other pods within the cluster.

The team wants you to create two services to expose these two components. Examine the two deployments, and create two services that meet the following criteria:

auth-svc
The service name is auth-svc.
The service exposes the pod replicas managed by the deployment named auth-deployment.
The service listens on port 8080 and its targetPort matches the port exposed by the pods.
The service type is NodePort.
data-svc
The service name is data-svc.
The service exposes the pod replicas managed by the deployment named data-deployment.
The service listens on port 8080 and its targetPort matches the port exposed by the pods.
The service type is ClusterIP.
Note: All work should be done in the default namespace.

----------------------------------------------------Solution-------------------------------------------------------------------------------------------------------------

Step 1: Created one service.yml file for NodePort

vi serviceport.yml

apiVersion: v1
kind: Service
metadata:
  name: auth-svc
  labels:
    app: auth-app
spec:
  type: NodePort
  ports:
    - port: 8080
      targetPort: 80
  selector:
    app: auth-app


master $ kubectl create -f service.yml
service/auth-svc created

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Step 2: Created one nginx.yml file for deployment

vi nginx.yml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-deployment
  labels:
    app: auth-app
spec:
  selector:
   matchLabels:
     app : auth-app
  template:
    metadata:
      labels: 
        app: auth-app
    spec:
      containers:
      - name: nginx-container
        image: nginx
        ports:
        - name: http-port
          containerPort: 80
------------------------------------------------------------------------------------------------------------------------------------------
master $ vi nginx.yml
master $ kubectl create -f nginx.yml
deployment.apps/auth-deployment created
------------------------------------------------------------------------------------------------------------------------------------------------------
master $ kubectl get svc
NAME         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE
auth-svc     NodePort    10.111.108.114   <none>        8080:31470/TCP   7m56s

kubernetes   ClusterIP   10.96.0.1        <none>        443/TCP          153m
------------------------------------------------------------------------------------------------------------------------------------------------------
Step 3: Created another service file for clusterIp
 
vi servicecluster.yml

apiVersion: v1
kind: Service
metadata:
  name: data-svc
  labels:
    app: data-app
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 80
  selector:
    app: data-app


Step 4:
vi nginx.yml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: data-deployment
  labels:
    app: data-app
spec:
  selector:
   matchLabels:
     app : data-app
  template:
    metadata:
      labels: 
        app: data-app
    spec:
      containers:
      - name: nginx-ctr
        image: nginx
        ports:
        - name: http-port
          containerPort: 80

master $ kubectl create -f nginx1.yml
deployment.apps/data-deployment created
master $ vi servicecluster.yml
master $ kubectl create -f servicecluster.yml
service/data-svc created
---------------------------------------------------------------------------------------------------------------------------------------------------------------------

master $ kubectl get svc
NAME         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE

data-svc     ClusterIP   10.110.120.208   <none>        8080/TCP         6m54s
kubernetes   ClusterIP   10.96.0.1        <none>        443/TCP          159m
------------------------------------------------------------------------------------------------------------------------------------------------
master $ kubectl get deployments
NAME              READY   UP-TO-DATE   AVAILABLE   AGE
auth-deployment   1/1     1            1           18m
data-deployment   1/1     1            1           10m
-----------------------------------------------------------------------------------------------------------------------------------
master $ kubectl get pods
NAME                               READY   STATUS    RESTARTS   AGE
auth-deployment-59595ddb85-fbbp7   1/1     Running   0          20m
data-deployment-7fb8bb59c9-pwqfh   1/1     Running   0          11m
--------------------------------------------------------------------------------------------------------------------------------------------
master $ curl http://10.110.120.208:8080
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
